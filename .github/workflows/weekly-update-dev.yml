name: Weekly Status (dev)

on:
  # run on every push to your dev branch
  push:
    branches:
      - weekly-status-dev
    paths:
      - "scripts/weekly_status_markdown.py"
      - ".github/workflows/weekly-update-dev.yml"
  # run on any PR that targets your default branch and originates from same repo
  pull_request:
    branches:
      - main
    paths:
      - "scripts/weekly_status_markdown.py"
      - ".github/workflows/weekly-update-dev.yml"
  # allow manual runs
  workflow_dispatch:

permissions:
  contents: read
  issues: read
  pull-requests: write # needed to post/update a PR comment

concurrency:
  group: weekly-status-dev-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dev-run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install requests

      - name: Generate weekly markdown
        id: gen
        env:
          # Prefer the built-in token during dev
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: input-output-hk/acropolis

          # ---- If you have a Projects (v2) board, uncomment and set these:
          # PROJECT_OWNER: input-output-hk
          # PROJECT_NUMBER: 7
          # STATUS_DONE_VALUE: Done
          # STATUS_INPROGRESS_VALUE: In Progress

          # ---- Or fall back to labels during dev:
          # DONE_LABELS: "status: done,done"
          # INPROGRESS_LABELS: "status: in progress,in progress"

          OUTPUT_PATH: artifacts/weekly_status.md
        run: |
          python scripts/weekly_status_markdown.py | tee /tmp/out.md
          echo "md<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/out.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload artifact (dev)
        uses: actions/upload-artifact@v4
        with:
          name: weekly-status-dev
          path: artifacts/weekly_status.md
          if-no-files-found: warn

      # Post or update a sticky PR comment with the Markdown (only on PR events)
      - name: Create/Update PR comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const header = "### ðŸ“‹ Weekly Status (auto-generated DEV)";
            const body = `${header}\n\n${process.env.MD}`;
            const { owner, repo, number } = context.issue;
            // Find an existing bot comment to update
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.find(c =>
              c.user.type === "Bot" &&
              c.user.login.endsWith("[bot]") &&
              c.body && c.body.startsWith(header)
            );
            if (mine) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
        env:
          MD: ${{ steps.gen.outputs.md }}
