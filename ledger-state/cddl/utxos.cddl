; This file defines the specification for the UTxO state. It is based on the `UtxOState` definition from the cardano-ledger specification.

; types for codegen-cddl
hash32 = _CDDL_CODEGEN_EXTERN_TYPE_
hash28 = _CDDL_CODEGEN_EXTERN_TYPE_
keyhash = _CDDL_CODEGEN_EXTERN_TYPE_
address = _CDDL_CODEGEN_EXTERN_TYPE_
coin = _CDDL_CODEGEN_EXTERN_TYPE_
positive_coin = _CDDL_CODEGEN_EXTERN_TYPE_
credential = _CDDL_CODEGEN_EXTERN_TYPE_
gov_action_id = _CDDL_CODEGEN_EXTERN_TYPE_

; Cardano Types
datum_option = [(0, hash32) // (1, data)]
data = #6.24(bytes .cbor plutus_data)
script_ref = #6.24(bytes .cbor script)

plutus_data =
  constr<plutus_data>
  / {* plutus_data => plutus_data}
  / [* plutus_data]
  / big_int
  / bounded_bytes

constr<T> =
  #6.121([* T])
  / #6.122([* T])
  / #6.123([* T])
  / #6.124([* T])
  / #6.125([* T])
  / #6.126([* T])
  / #6.127([* T])
  / #6.102([uint, [* T]])

; The real bounded_bytes does not have this limit. it instead has
; a different limit which cannot be expressed in CDDL.
;
; The limit is as follows:
;  - bytes with a definite-length encoding are limited to size 0..64
;  - for bytes with an indefinite-length CBOR encoding, each chunk is
;    limited to size 0..64
;  ( reminder: in CBOR, the indefinite-length encoding of
;  bytestrings consists of a token #2.31 followed by a sequence
;  of definite-length encoded bytestrings and a stop code )
bounded_bytes = bytes .size (0 .. 64)
big_int = int / big_uint / big_nint
big_uint = #6.2(bounded_bytes)


multiasset<T> = {+ hash28 => {+ bytes .size (0 .. 32) => T}}
value = coin / [coin, multiasset<positive_coin>]

tx_in = [hash32, uint .size 2]

shelley_tx_out = [address, value, ? hash32]
babbage_tx_out = {0 : address, 1 : value, ? 2 : datum_option, ? 3 : script_ref}

tx_out = shelley_tx_out / babbage_tx_out

; `utxo_state` provides the current UTxO set and tracks value leaving the UTxO set at the next epoch boundary
utxo_state = {
    utxos   : { * tx_in => tx_out }
  , fees    : coin
  , deposits: { * deposit => coin }
  , dontions: coin
}

deposit = credential_deposit
 / pool_deposit
 / drep_deposit
 / gov_action_deposit

credential_deposit = (0, credential)
pool_deposit = (1, keyhash)
drep_deposit = (2, credential)
gov_action_deposit = (3, gov_action_id)
