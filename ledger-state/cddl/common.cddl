; This file contains some some basic, shared types that are used throughout the ledger state specification.

hash_28 = bytes .size 28
hash_32 = bytes .size 32

keyhash = hash_28

; TODO: Are able to further restrict the legal bytes of reward account according to CIP-19 (https://cips.cardano.org/cip/CIP-19)?
reward_account = bytes

credential = [(0, addr_keyhash) // (1, script_hash)]


positive_coin = 1 .. maxWord64
maxWord64 = 18446744073709551615

coin = uint
epoch = uint .size 8

gov_action_id = [hash32, uint .size 2]


; Unfortunately, CDDL does not provide ways that we can restrict the content of a bytestring.
; As a result, we are unable to define addresses in a restrictive way that is machine readable
; In theory, we could provide custom decorators to convert `text` to `bytes`, then
; the .regexp control operator to more accurately define the addresses.
; For more restrictive information regarding the address, check the Conway era CDDL:
; https://github.com/IntersectMBO/cardano-ledger/blob/master/eras/conway/impl/cddl-files/conway.cddl#L167
address = bytes

denominator = uint .gt 0
; A unit interval is a rational number (https://peteroupc.github.io/CBOR/rational.html)
; that MUST be in the range [0, 1].
;
; The additional restriction requires that:
;   numerator <= denominator
;
; This relation cannot be expressed in CDDL (TODO: is this true?)
; but it must be enforced by serialization/deserialization processes
unit_interval = #6.30([uint, uint])

; Conway introduced `nonempty_set` as:
;   `nonempty_set<a0> = #6.258([+ a0])/ [+ a0]`
; For simplicity, we remove the option, and require the tag 258.
nonempty_set<T> = #6.258([+ T])

url = text .size (0 .. 128)
